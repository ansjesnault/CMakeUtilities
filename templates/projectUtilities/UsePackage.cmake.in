## CMAKE_DOCUMENTATION_START UsePackage.cmake.in
##
##  Generic cmake script to generate your export project file (see \\<PACKAGE_NAME\\>Package.cmake)
##
##  File which allow to import your project in another project\\n
##  \\n
##  When you export your project (see \\ref project_export from \\ref project_tools file)
##  cmake will generate an export file containing all your project's targets imported.\\n
##  \\n
##  Here we include the export file generated by cmake to import library and executable targets.\\n
##  We define some cmake variables for the other project :
##      \\li    \\<PACKAGE_NAME\\>_CMAKE_DIR    :   Where you can find all .cmake file (an this file)
##      \\li    \\<PACKAGE_NAME\\>_INCLUDE_DIR  :   Where you can find \\<PACKAGE_NAME\\> installed header files
##      \\li    \\<PACKAGE_NAME\\>_INCLUDE_DIRS :   Embed also dirs included by the \\<PACKAGE_NAME\\> project
##      \\li    \\<PACKAGE_NAME\\>_ARCHIVE_DIR  :   Where you can find libraries
##      \\li    \\<PACKAGE_NAME\\>_LIBRARY_DIR  :   Where you can find dynamic libraries
##      \\li    \\<PACKAGE_NAME\\>_LIBRARIES    :   \\<PACKAGE_NAME\\> libs
##      \\li    \\<PACKAGE_NAME\\>_VERSION      :   The version of the \\<PACKAGE_NAME\\> build
##
##  Then we loooking for other files matching with the "Use\\<PACKAGE_NAME\\>_*.cmake" pattern to include it.\\n
##  Typicaly, if your project have some 3rdParty, you can create a Use\\<PACKAGE_NAME\\>_Depndencies.cmake and put
##  some cmake code to find an initialise your project dependencies for any other project want to use your project.
##  \\li see \\ref Use\\<PACKAGE_NAME\\>_Dependencies cmake script file
##  \\li see \\ref PackageConfig cmake script file
##  \\n
##  \\n
##  This file requiered some variables from the exported project :
##      \\li    PACKAGE_NAME            variable which is the cmake package name of the exporte project.
##      \\li    EXPORT_PROJECT_FILENAME variable which is the cmake file name of the generated cmake file containing
##  the imported targets (generaly it's <lowercase_packageName>-config.cmake)
##      \\li    VERSION_MAJOR           cmake variable for major version.
##      \\li    VERSION_MINOR           cmake variable for minor version.
##      \\li    VERSION_BUILD           cmake variable for buil or patch version.
##      \\li    DEPS_INCLUDE_DIRS       cmake variable including all your include dirs you set witch include_directories command.
## (to get this variable, use get_directory_property(DEPS_INCLUDE_DIRS INCLUDE_DIRECTORIES) )
##
## CMAKE_DOCUMENTATION_END


## CMAKE_DOCUMENTATION_START FIND_PACKAGE_NAME_LIBRARIES
## 
## Only internal use. \\n
## Macro which parse the cmake export file (generaly <package>-config.cmake) 
## to append a list of libraries. \\n
## Provide \\<PACKAGE_NAME\\>_LIBRARIES variable for the \\ref UsePackage cmake file script. 
##
## CMAKE_DOCUMENTATION_END
MACRO(FIND_@PACKAGE_NAME@_LIBRARIES @PACKAGE_NAME@ConfigPathFileName)

    set(@PACKAGE_NAME@_LIBRARIES "")
    if(EXISTS ${@PACKAGE_NAME@ConfigPathFileName})
      file(READ ${@PACKAGE_NAME@ConfigPathFileName} FileContent)
      STRING(REGEX REPLACE "\r?\n" ";" FileContent "${FileContent}")
      foreach(line ${FileContent})      
        string(REGEX MATCH "ADD_LIBRARY\\(.* SHARED IMPORTED" m ${line})
        if( m )
          string(REGEX REPLACE "ADD_LIBRARY\\((.*) SHARED IMPORTED" "\\1" libName ${m})
          list(APPEND @PACKAGE_NAME@_LIBRARIES ${libName}) # the final cmake variable other project can use
        endif()
      endforeach()
    endif()

ENDMACRO()


get_filename_component(@PACKAGE_NAME@_CMAKE_DIR      "${CMAKE_CURRENT_LIST_FILE}" PATH) # cmake dir
get_filename_component(@PACKAGE_NAME@_IMPORT_PREFIX  "${@PACKAGE_NAME@_CMAKE_DIR}" PATH) # root dir

# From @PACKAGE_NAME@, the install EXPORT cmd, cmake provide all imported target
include(${@PACKAGE_NAME@_CMAKE_DIR}/@EXPORT_PROJECT_FILENAME@)

# libs
FIND_@PACKAGE_NAME@_LIBRARIES(${@PACKAGE_NAME@_CMAKE_DIR}/@EXPORT_PROJECT_FILENAME@)

#version
set(@PACKAGE_NAME@_VERSION "@VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_BUILD@")

# include
set(@PACKAGE_NAME@_INCLUDE_DIR ${@PACKAGE_NAME@_IMPORT_PREFIX}/@PUBLIC_HEADER_OUTPUT_PREFIX@)
set(@PACKAGE_NAME@_INCLUDE_DIRS ${@PACKAGE_NAME@_INCLUDE_DIR} )
include_directories(${@PACKAGE_NAME@_INCLUDE_DIRS})

# def
add_definitions(-DHAS_@PACKAGE_NAME@)

## ######################################################################
## Additional files matching with "Use@PACKAGE_NAME@_*.cmake" (dependencies...)
## ######################################################################
file(GLOB USE_@PACKAGE_NAME@_FILES "${@PACKAGE_NAME@_CMAKE_DIR}/Use@PACKAGE_NAME@_*.cmake")
foreach(USE_@PACKAGE_NAME@_FILE ${USE_@PACKAGE_NAME@_FILES})
    include(${USE_@PACKAGE_NAME@_FILE})
endforeach()

